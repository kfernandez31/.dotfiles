#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# Changing Window focus

# change window focus within space
fn - h : yabai -m window --focus west
fn - j : yabai -m window --focus south
fn - k : yabai -m window --focus north
fn - l : yabai -m window --focus east


# Modifying the layout

# rotate layout 
fn - r : yabai -m space --rotate 270 
shift + fn - r : yabai -m space --rotate 90 

# flip along y-axis
fn - y : yabai -m space --mirror y-axis

# flip along x-axis
fn - x : yabai -m space --mirror x-axis

# toggle window float
fn - f : yabai -m window --toggle float --grid 4:4:1:1:2:2


# Modifying Window Size

# maximize a window
fn - z : yabai -m window --toggle zoom-fullscreen

# balance out tree of windows (resize to occupy same area)
fn - b : yabai -m space â€”-balance # FIXME 

# Resizing Windows
# TODO


# Moving Windows Around

fn -s : yabai -m window --toggle sticky

# swap windows
shift + fn - h : yabai -m window --swap west
shift + fn - j : yabai -m window --swap south
shift + fn - k : yabai -m window --swap north
shift + fn - l : yabai -m window --swap east

# warp windows 
ctrl + fn - h : yabai -m window --warp west
ctrl + fn - j : yabai -m window --warp south
ctrl + fn - k : yabai -m window --warp north
ctrl + fn - l : yabai -m window --warp east

# move window to display left and right # FIXME

# move window to prev and next space
shift + fn - w: yabai -m window --space prev
shift + fn - e: yabai -m window --space next

# move window to space #
shift + fn - 1: yabai -m window --space 1
shift + fn - 2: yabai -m window --space 2
shift + fn - 3: yabai -m window --space 3
shift + fn - 4: yabai -m window --space 4
shift + fn - 5: yabai -m window --space 5
shift + fn - 6: yabai -m window --space 6
shift + fn - 7: yabai -m window --space 7


# Start/Stopping Yabai

# -- start/stop yabai ---
ctrl + fn - s : yabai --start-service 
ctrl + fn - q : yabai --stop-service
